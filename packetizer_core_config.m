
function packetizer_core_config(this_block)

  % Revision History:
  %
  %   16-Nov-2017  (23:00 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /home/davidm/casper/s6_gateware/packetizer_core.vhd
  %
  %

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('packetizer_core');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('sync_in');
  this_block.addSimulinkInport('din');
  this_block.addSimulinkInport('sid');
  this_block.addSimulinkInport('tx_enable');
  this_block.addSimulinkInport('ip_dest_0');
  this_block.addSimulinkInport('ip_dest_1');
  this_block.addSimulinkInport('ip_dest_2');
  this_block.addSimulinkInport('ip_dest_3');
  this_block.addSimulinkInport('ip_dest_4');
  this_block.addSimulinkInport('ip_dest_5');
  this_block.addSimulinkInport('ip_dest_6');
  this_block.addSimulinkInport('ip_dest_7');
  this_block.addSimulinkInport('ip_dest_8');
  this_block.addSimulinkInport('ip_dest_9');
  this_block.addSimulinkInport('ip_dest_10');
  this_block.addSimulinkInport('ip_dest_11');
  this_block.addSimulinkInport('ip_dest_12');
  this_block.addSimulinkInport('ip_dest_13');
  this_block.addSimulinkInport('ip_dest_14');
  this_block.addSimulinkInport('ip_dest_15');
  this_block.addSimulinkInport('ip_dest_16');
  this_block.addSimulinkInport('ip_dest_17');
  this_block.addSimulinkInport('ip_dest_18');
  this_block.addSimulinkInport('ip_dest_19');
  this_block.addSimulinkInport('ip_dest_20');
  this_block.addSimulinkInport('ip_dest_21');
  this_block.addSimulinkInport('ip_dest_22');
  this_block.addSimulinkInport('ip_dest_23');
  this_block.addSimulinkInport('ip_dest_24');
  this_block.addSimulinkInport('ip_dest_25');
  this_block.addSimulinkInport('ip_dest_26');
  this_block.addSimulinkInport('ip_dest_27');
  this_block.addSimulinkInport('ip_dest_28');
  this_block.addSimulinkInport('ip_dest_29');
  this_block.addSimulinkInport('ip_dest_30');
  this_block.addSimulinkInport('ip_dest_31');

  this_block.addSimulinkOutport('dout0');
  this_block.addSimulinkOutport('dv0');
  this_block.addSimulinkOutport('dst0');
  this_block.addSimulinkOutport('eof0');
  this_block.addSimulinkOutport('dout1');
  this_block.addSimulinkOutport('dv1');
  this_block.addSimulinkOutport('dst1');
  this_block.addSimulinkOutport('eof1');

  dout0_port = this_block.port('dout0');
  dout0_port.setType('UFix_64_0');
  dout1_port = this_block.port('dout1');
  dout1_port.setType('UFix_64_0');
  dst0_port = this_block.port('dst0');
  dst0_port.setType('UFix_32_0');
  dst1_port = this_block.port('dst1');
  dst1_port.setType('UFix_32_0');
  dv0_port = this_block.port('dv0');
  dv0_port.setType('Bool');
  dv0_port.useHDLVector(false);
  dv1_port = this_block.port('dv1');
  dv1_port.setType('Bool');
  dv1_port.useHDLVector(false);
  eof0_port = this_block.port('eof0');
  eof0_port.setType('Bool');
  eof0_port.useHDLVector(false);
  eof1_port = this_block.port('eof1');
  eof1_port.setType('Bool');
  eof1_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('din').width ~= 64);
      this_block.setError('Input data type for port "din" must have width=64.');
    end

    if (this_block.port('sid').width ~= 8);
      this_block.setError('Input data type for port "sid" must have width=8.');
    end

    if (this_block.port('sync_in').width ~= 1);
      this_block.setError('Input data type for port "sync_in" must have width=1.');
    end

    this_block.port('sync_in').useHDLVector(false);

    if (this_block.port('tx_enable').width ~= 1);
      this_block.setError('Input data type for port "tx_enable" must have width=1.');
    end

    this_block.port('tx_enable').useHDLVector(false);

    if (this_block.port('ip_dest_0').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_0" must have width=32.');
    end

    if (this_block.port('ip_dest_1').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_1" must have width=32.');
    end

    if (this_block.port('ip_dest_10').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_10" must have width=32.');
    end

    if (this_block.port('ip_dest_11').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_11" must have width=32.');
    end

    if (this_block.port('ip_dest_12').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_12" must have width=32.');
    end

    if (this_block.port('ip_dest_13').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_13" must have width=32.');
    end

    if (this_block.port('ip_dest_14').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_14" must have width=32.');
    end

    if (this_block.port('ip_dest_15').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_15" must have width=32.');
    end

    if (this_block.port('ip_dest_16').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_16" must have width=32.');
    end

    if (this_block.port('ip_dest_17').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_17" must have width=32.');
    end

    if (this_block.port('ip_dest_18').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_18" must have width=32.');
    end

    if (this_block.port('ip_dest_19').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_19" must have width=32.');
    end

    if (this_block.port('ip_dest_2').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_2" must have width=32.');
    end

    if (this_block.port('ip_dest_20').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_20" must have width=32.');
    end

    if (this_block.port('ip_dest_21').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_21" must have width=32.');
    end

    if (this_block.port('ip_dest_22').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_22" must have width=32.');
    end

    if (this_block.port('ip_dest_23').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_23" must have width=32.');
    end

    if (this_block.port('ip_dest_24').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_24" must have width=32.');
    end

    if (this_block.port('ip_dest_25').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_25" must have width=32.');
    end

    if (this_block.port('ip_dest_26').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_26" must have width=32.');
    end

    if (this_block.port('ip_dest_27').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_27" must have width=32.');
    end

    if (this_block.port('ip_dest_28').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_28" must have width=32.');
    end

    if (this_block.port('ip_dest_29').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_29" must have width=32.');
    end

    if (this_block.port('ip_dest_3').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_3" must have width=32.');
    end

    if (this_block.port('ip_dest_30').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_30" must have width=32.');
    end

    if (this_block.port('ip_dest_31').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_31" must have width=32.');
    end

    if (this_block.port('ip_dest_4').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_4" must have width=32.');
    end

    if (this_block.port('ip_dest_5').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_5" must have width=32.');
    end

    if (this_block.port('ip_dest_6').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_6" must have width=32.');
    end

    if (this_block.port('ip_dest_7').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_7" must have width=32.');
    end

    if (this_block.port('ip_dest_8').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_8" must have width=32.');
    end

    if (this_block.port('ip_dest_9').width ~= 32);
      this_block.setError('Input data type for port "ip_dest_9" must have width=32.');
    end

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    uniqueInputRates = unique(this_block.getInputRates);


  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('packetizer_core.vhd');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

s6
